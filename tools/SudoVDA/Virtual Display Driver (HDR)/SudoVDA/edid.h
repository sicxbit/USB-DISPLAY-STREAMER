#pragma once

#define EDID_OFFSET_SERIAL 0x0C
#define EDID_OFFSET_SERIALSTR 0x4D
#define EDID_OFFSET_PRODNAME 0x71
#define EDID_STRING_FIELD_SIZE 13

const BYTE edid_base[] = {
	0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x4d, 0xab, 0xce, 0xd1, 0xef, 0x2d, 0xbc, 0x1a,
	0x20, 0x22, 0x01, 0x03, 0x80, 0x46, 0x27, 0x78, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xa5, 0x6b, 0x80, 0xd1, 0xc0, 0xb3, 0x00, 0xa9, 0xc0, 0x81, 0x80, 0x81, 0x00,
	0x81, 0xc0, 0x01, 0x01, 0x01, 0x01, 0x4d, 0xd0, 0x00, 0xa0, 0xf0, 0x70, 0x3e, 0x80, 0x30, 0x20,
	0x35, 0x00, 0xba, 0x89, 0x21, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xff, 0x00, 0x31, 0x32, 0x33,
	0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x0f,
	0xff, 0x14, 0xff, 0xff, 0x00, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xfc,
	0x00, 0x53, 0x75, 0x64, 0x6f, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x56, 0x44, 0x44, 0x0a, 0x01, 0xa4,
	0x02, 0x03, 0x44, 0xf0, 0x51, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x10, 0x1f, 0x22, 0x21, 0x20, 0x05,
	0x14, 0x04, 0x13, 0x12, 0x03, 0x01, 0x23, 0x0f, 0x56, 0x05, 0x83, 0x0f, 0x08, 0x00, 0x6d, 0x03,
	0x0c, 0x00, 0x10, 0x00, 0x38, 0x78, 0x20, 0x00, 0x60, 0x01, 0x02, 0x03, 0x67, 0xd8, 0x5d, 0xc4,
	0x01, 0x78, 0x80, 0x03, 0xe3, 0x05, 0xe0, 0x01, 0xe4, 0x0f, 0x18, 0x00, 0x00, 0xe6, 0x06, 0x0f,
	0x01, 0xc8, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e,
};



uint8_t* generate_edid(uint32_t serial, const char* serial_str, const char* prod_name) {
	uint8_t* edid_data = (uint8_t*)malloc(sizeof(edid_base));

	if (!edid_data) {
		return (uint8_t*)edid_base;
	}

	memcpy(edid_data, edid_base, sizeof(edid_base));

	memcpy(edid_data + EDID_OFFSET_SERIAL, &serial, 4);

	size_t pn_len, pn_pad;

	if (serial_str) {
		pn_len = strlen(serial_str);
		if (pn_len) {
			if (pn_len > EDID_STRING_FIELD_SIZE) {
				pn_len = EDID_STRING_FIELD_SIZE;
			}
			pn_pad = EDID_STRING_FIELD_SIZE - pn_len;

			memcpy(edid_data + EDID_OFFSET_SERIALSTR, serial_str, pn_len);
			memset(edid_data + EDID_OFFSET_SERIALSTR + pn_len, ' ', pn_pad);

			if (pn_pad > 0) {
				edid_data[EDID_OFFSET_SERIALSTR + pn_len] = 0x0A;
				pn_pad -= 1;
				pn_len += 1;
			}

			if (pn_pad) {
				memset(edid_data + EDID_OFFSET_SERIALSTR + pn_len, ' ', pn_pad);
			}
		}
	}

	if (prod_name) {
		pn_len = strlen(prod_name);
		if (pn_len) {
			if (pn_len > EDID_STRING_FIELD_SIZE) {
				pn_len = EDID_STRING_FIELD_SIZE;
			}
			pn_pad = EDID_STRING_FIELD_SIZE - pn_len;

			memcpy(edid_data + EDID_OFFSET_PRODNAME, prod_name, pn_len);
			memset(edid_data + EDID_OFFSET_PRODNAME + pn_len, ' ', pn_pad);

			if (pn_pad > 0) {
				edid_data[EDID_OFFSET_PRODNAME + pn_len] = 0x0A;
				pn_pad -= 1;
				pn_len += 1;
			}

			if (pn_pad) {
				memset(edid_data + EDID_OFFSET_PRODNAME + pn_len, ' ', pn_pad);
			}
		}
	}

	uint32_t sum = 0;
	for (size_t i = 0; i < 127; i++) {
		sum += edid_data[i];
	}

	uint8_t checksum = static_cast<uint8_t>(256 - (sum % 256));
	edid_data[127] = checksum;

	return edid_data;
}